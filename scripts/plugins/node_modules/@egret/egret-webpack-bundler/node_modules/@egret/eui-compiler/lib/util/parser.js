"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var convert = require("xml-js");
var exml_ast_1 = require("../exml-ast");
var typings_1 = require("./typings");
var skinNameIndex = 0;
var currentSkinNode;
function generateAST(filecontent) {
    skinNameIndex = 0;
    var data = convert.xml2js(filecontent);
    var rootExmlElement = data.elements.find(function (e) { return e.name === 'e:Skin'; });
    var skinNode = createSkinNode(rootExmlElement);
    return skinNode;
}
exports.generateAST = generateAST;
function getClassNameFromEXMLElement(element) {
    return element.name.replace("e:", "eui.").replace("ns1:", "");
}
function getExmlChildren(element) {
    var childrenElements = element.elements;
    if (!childrenElements) {
        return [];
    }
    else {
        return childrenElements.filter(function (item) {
            return item.type !== 'comment';
        });
    }
    ;
}
function getNodeType(name1) {
    var tempArr = name1.split(":");
    var namespace = tempArr[0];
    var name = tempArr[1];
    // 根据名称的首字母是否是大小写来判断是属性还是子节点
    var type = name.charAt(0).toLowerCase() === name.charAt(0)
        ? exml_ast_1.AST_FullName_Type.ATTRIBUTE
        : exml_ast_1.AST_FullName_Type.ELEMENT;
    return { namespace: namespace, name: name, type: type };
}
function parseStateAttribute(className, originKey, value) {
    var _a = originKey.split("."), key = _a[0], stateName = _a[1];
    var type = typings_1.getTypings(className, key);
    var attribute = createAttribute(key, type, value);
    return {
        type: "set",
        attribute: attribute,
        name: stateName
    };
}
/**
 * 将NodeElement的 attribute节点转化为Node的Attribute
 * @param nodeElement
 */
function createAST_Attributes(node, nodeElement) {
    var attributes = [];
    var className = getClassNameFromEXMLElement(nodeElement);
    for (var key in nodeElement.attributes) {
        if (key === 'locked') {
            continue;
        }
        var value = nodeElement.attributes[key];
        if (value.indexOf("%") >= 0) {
            if (key === 'width') {
                key = 'percentWidth';
                value = value.replace("%", '');
            }
            else if (key === 'height') {
                key = 'percentHeight';
                value = value.replace("%", '');
            }
        }
        if (key.indexOf(".") >= 0) {
            var stateAttribute = parseStateAttribute(className, key, value);
            node.stateAttributes.push(stateAttribute);
            continue;
        }
        if (key === 'includeIn') {
            var includeStates = value.split(",").map(function (sName) {
                return {
                    name: sName,
                    type: 'add'
                };
            });
            node.stateAttributes = node.stateAttributes.concat(includeStates);
            continue;
        }
        var type = typings_1.getTypings(className, key);
        if (!type) {
            continue;
        }
        var attribute = createAttribute(key, type, value);
        attributes.push(attribute);
    }
    node.attributes = attributes;
}
function createAttribute(key, type, attributeValue) {
    var value = attributeValue;
    if (type == 'number') {
        value = Number(attributeValue);
    }
    else if (type === 'boolean') {
        value = attributeValue === 'true';
    }
    else if (['top', 'bottom', 'left', 'right'].indexOf(key) >= 0) {
        if (!isNaN(parseFloat(attributeValue))) {
            type = 'number';
            value = parseFloat(attributeValue);
        }
    }
    return {
        type: type,
        key: key,
        value: value
    };
}
function createSkinNode(rootExmlElement) {
    var varIndex = 0;
    var childrenExmlElement = getExmlChildren(rootExmlElement);
    var fullclassname = rootExmlElement
        && rootExmlElement.attributes
        && rootExmlElement.attributes.class
        ? rootExmlElement.attributes.class
        : "skins.TestSkin" + skinNameIndex++;
    var x = fullclassname.split(".");
    var namespace = x[0];
    var classname = x[1];
    currentSkinNode = {
        namespace: namespace,
        stateAttributes: [],
        classname: classname,
        children: [],
        attributes: [],
        states: []
    };
    for (var key in rootExmlElement.attributes) {
        if (key === 'class' || key.indexOf("xmlns") >= 0) {
            continue;
        }
        var value = rootExmlElement.attributes[key];
        if (key === 'states') {
            currentSkinNode.states = value.split(',');
            continue;
        }
        var type = typings_1.getTypings('eui.Skin', key);
        if (!type) {
            continue;
        }
        var attribute = createAttribute(key, type, value);
        currentSkinNode.attributes.push(attribute);
    }
    currentSkinNode.children = childrenExmlElement.map(createAST_Node);
    // writeFileSync("2.log", JSON.stringify(skin, null, '  '));
    return currentSkinNode;
    function createAST_Node(nodeExmlElement) {
        var childrenExmlElement = getExmlChildren(nodeExmlElement);
        var type = getClassNameFromEXMLElement(nodeExmlElement);
        varIndex++;
        var node = {
            type: type,
            children: [],
            attributes: [],
            stateAttributes: [],
            varIndex: varIndex,
            id: null
        };
        createAST_Attributes(node, nodeExmlElement);
        var attributeIdIndex = node.attributes.findIndex(function (item) { return item.key === 'id'; });
        if (attributeIdIndex >= 0) {
            var attributeId = node.attributes[attributeIdIndex];
            var id = attributeId.value;
            node.attributes.splice(attributeIdIndex, 1);
            node.id = id;
        }
        for (var _i = 0, childrenExmlElement_1 = childrenExmlElement; _i < childrenExmlElement_1.length; _i++) {
            var element = childrenExmlElement_1[_i];
            var nodeType = void 0;
            if (type === 'eui.Scroller' && element.name === 'e:List') {
                nodeType = {
                    namespace: 'e',
                    name: "viewport",
                    type: exml_ast_1.AST_FullName_Type.ATTRIBUTE
                };
            }
            else {
                nodeType = getNodeType(element.name);
            }
            // NodeElement的children中
            // 不一定全是 node.children
            // 也有可能是 attribute
            if (nodeType.type === exml_ast_1.AST_FullName_Type.ELEMENT) {
                var child = createAST_Node(element);
                node.children.push(child);
            }
            else {
                var key = nodeType.name;
                if (key === 'skinName') {
                    var attribute = {
                        type: key,
                        key: key,
                        value: createSkinNode(element.elements[0])
                    };
                    node.attributes.push(attribute);
                }
                else if (key === 'viewport') {
                    var attribute = {
                        type: 'object',
                        key: key,
                        value: createAST_Node(element)
                    };
                    node.attributes.push(attribute);
                }
                else if (key === 'layout') {
                    var attribute = {
                        type: 'object',
                        key: key,
                        value: createAST_Node(element.elements[0])
                    };
                    node.attributes.push(attribute);
                }
                else {
                    throw new Error("missing " + key);
                }
            }
        }
        return node;
    }
}
