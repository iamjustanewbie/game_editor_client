"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateConfig = exports.EgretWebpackBundler = void 0;
var express_1 = __importDefault(require("express"));
var fs = __importStar(require("fs"));
var path = __importStar(require("path"));
var webpack_1 = __importDefault(require("webpack"));
var egretproject_1 = require("./egretproject");
var Plugin_1 = __importDefault(require("./loaders/src-loader/Plugin"));
var theme_1 = __importDefault(require("./loaders/theme"));
var ts_transformer_1 = require("./loaders/ts-loader/ts-transformer");
var open_1 = require("./open");
var ts_minify_transformer_1 = require("@egret/ts-minify-transformer");
var middleware = require("webpack-dev-middleware");
var ForkTsCheckerPlugin = require('fork-ts-checker-webpack-plugin');
var HtmlWebpackPlugin = require('html-webpack-plugin');
var webpackMerge = require('webpack-merge');
var EgretWebpackBundler = /** @class */ (function () {
    function EgretWebpackBundler(projectRoot, target) {
        this.projectRoot = projectRoot;
        this.target = target;
        this.emitter = null;
    }
    EgretWebpackBundler.prototype.startDevServer = function (options) {
        var libraryType = 'debug';
        var scripts = egretproject_1.getLibsFileList('web', this.projectRoot, libraryType);
        var webpackStatsOptions = { colors: true, modules: false };
        var webpackConfig = generateConfig(this.projectRoot, options, this.target, true);
        var compiler = webpack_1.default(webpackConfig);
        var compilerApp = express_1.default();
        compilerApp.use(allowCrossDomain);
        var middlewareOptions = {
            stats: webpackStatsOptions,
            publicPath: undefined,
        };
        compilerApp.use(middleware(compiler, middlewareOptions));
        var port = options.port || 3000;
        startExpressServer(compilerApp, port);
        compilerApp.use(express_1.default.static(this.projectRoot));
        var manifestContent = JSON.stringify({ initial: scripts, game: ['main.js'] }, null, '\t');
        fs.writeFileSync(path.join(this.projectRoot, 'manifest.json'), manifestContent, 'utf-8');
        if (options.open) {
            open_1.openUrl("http://localhost:" + port + "/index.html");
        }
    };
    EgretWebpackBundler.prototype.build = function (options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var webpackStatsOptions = { colors: true, modules: false };
            var scripts = egretproject_1.getLibsFileList(_this.target, _this.projectRoot, options.libraryType);
            var webpackConfig = generateConfig(_this.projectRoot, options, _this.target, false);
            var handler = function (error, status) {
                console.log(status.toString(webpackStatsOptions));
                resolve();
            };
            var compiler = webpack_1.default(webpackConfig);
            if (_this.emitter) {
                for (var _i = 0, scripts_1 = scripts; _i < scripts_1.length; _i++) {
                    var script = scripts_1[_i];
                    var content = fs.readFileSync(path.join(_this.projectRoot, script));
                    _this.emitter(script, content);
                }
                compiler.outputFileSystem = {
                    mkdir: function (path, callback) {
                        callback(null);
                    },
                    mkdirp: function (path, callback) {
                        callback(null);
                    },
                    rmdir: function (path, callback) {
                        callback(null);
                    },
                    unlink: function (path, callback) {
                        callback(null);
                    },
                    join: path.join,
                    writeFile: function (p, data, callback) {
                        var _a;
                        var relativePath = path.relative((_a = webpackConfig.output) === null || _a === void 0 ? void 0 : _a.path, p).split("\\").join("/");
                        _this.emitter(relativePath, data);
                        callback(null);
                    }
                };
            }
            compiler.run(handler);
        });
    };
    return EgretWebpackBundler;
}());
exports.EgretWebpackBundler = EgretWebpackBundler;
function generateConfig(context, options, target, devServer) {
    context = context.split("/").join(path.sep);
    var needSourceMap = devServer;
    var mode = devServer ? "development" : "production";
    var config = {
        stats: "minimal",
        entry: './src/Main.ts',
        target: 'web',
        mode: mode,
        context: context,
        devtool: needSourceMap ? "source-map" : false,
        output: {
            path: path.resolve(context, 'dist'),
            filename: 'main.js'
        },
        module: {
            rules: []
        },
        resolve: {
            extensions: [".ts", ".js"]
        },
        optimization: {
            minimize: false,
        },
        plugins: []
    };
    generateWebpackConfig_typescript(config, options, needSourceMap);
    generateWebpackConfig_exml(config, options);
    generateWebpackConfig_html(config, options, target);
    genrateWebpackConfig_subpackages(config, options);
    if (target === 'lib') {
        config.output.library = 'xxx';
        config.output.libraryTarget = 'umd';
    }
    if (options.libraryType === 'debug') {
        config.plugins.push(new webpack_1.default.NamedModulesPlugin());
        config.plugins.push(new webpack_1.default.NamedChunksPlugin());
    }
    if (options.webpackConfig) {
        var customWebpackConfig = typeof options.webpackConfig === 'function' ? options.webpackConfig(config) : options.webpackConfig;
        config = webpackMerge(config, customWebpackConfig);
    }
    return config;
}
exports.generateConfig = generateConfig;
function genrateWebpackConfig_subpackages(config, options) {
    if (!options.subpackages) {
        return config;
    }
    var items = options.subpackages.map(function (subpackage) {
        return {
            name: subpackage.name,
            filename: subpackage.name + ".js",
            test: function (module) {
                return subpackage.matcher(module.resource);
            },
            chunks: "initial",
            minSize: 0,
        };
    });
    config.optimization = {
        splitChunks: {
            cacheGroups: {
                default: false
            }
        }
    };
    for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
        var item = items_1[_i];
        config.optimization.splitChunks.cacheGroups[item.name] = item;
    }
    return config;
}
function generateWebpackConfig_typescript(config, options, needSourceMap) {
    var _a, _b;
    var compilerOptions = {
        sourceMap: needSourceMap,
        importHelpers: true,
        noEmitHelpers: true
    };
    config.resolve.alias = {
        'tslib': require.resolve("tslib")
    };
    var rules = config.module.rules;
    var plugins = config.plugins;
    var srcLoaderRule = {
        test: /\.tsx?$/,
        include: path.join(config.context, 'src'),
        loader: require.resolve('./loaders/src-loader'),
    };
    var typescriptLoaderRule = {
        test: /\.tsx?$/,
        loader: require.resolve('ts-loader'),
        options: {
            transpileOnly: false,
            configFile: ((_a = options.typescript) === null || _a === void 0 ? void 0 : _a.tsconfigPath) || 'tsconfig.json',
            compilerOptions: compilerOptions,
            getCustomTransformers: function (program) {
                var _a;
                if ((_a = options.typescript) === null || _a === void 0 ? void 0 : _a.minify) {
                    return ({
                        before: [
                            ts_transformer_1.emitClassName(),
                            ts_minify_transformer_1.myTransformer(program, options.typescript.minify)
                        ]
                    });
                }
                else {
                    return ({
                        before: [
                            ts_transformer_1.emitClassName(),
                        ]
                    });
                }
            }
        }
    };
    if (((_b = options.typescript) === null || _b === void 0 ? void 0 : _b.mode) === 'modern') {
        plugins.push(new ForkTsCheckerPlugin());
        typescriptLoaderRule.options.transpileOnly = true;
        rules.push(typescriptLoaderRule);
    }
    else {
        rules.push(srcLoaderRule);
        plugins.push(new Plugin_1.default());
        rules.push(typescriptLoaderRule);
    }
    var tslibFunctions = Object.keys(require('tslib'));
    var provide = {};
    for (var _i = 0, tslibFunctions_1 = tslibFunctions; _i < tslibFunctions_1.length; _i++) {
        var key = tslibFunctions_1[_i];
        provide[key] = ['tslib', key];
    }
    provide['__reflect'] = [path.join(__dirname, 'helper.js'), '__reflect'];
    plugins.push(new webpack_1.default.ProvidePlugin(provide));
}
function generateWebpackConfig_exml(config, options) {
    var _a;
    if (!options.exml) {
        return;
    }
    var exmlLoaderRule = {
        test: /\.exml/,
        use: [
            // {
            //     loader: 'thread-loader',
            //     options: {
            //         workers: 2,
            //     },
            // },
            require.resolve("./loaders/exml"),
        ],
    };
    if ((_a = options.exml) === null || _a === void 0 ? void 0 : _a.watch) {
        // rules.push(srcLoaderRule);
        config.module.rules.push(exmlLoaderRule);
        config.plugins.push(new theme_1.default({}));
    }
}
function generateWebpackConfig_html(config, options, target) {
    var _a;
    if (!options.html) {
        return;
    }
    if (['web', 'ios', 'android'].indexOf(target) >= 0) {
        (_a = config.plugins) === null || _a === void 0 ? void 0 : _a.push(new HtmlWebpackPlugin({
            inject: false,
            template: options.html.templateFilePath
        }));
    }
}
function allowCrossDomain(req, res, next) {
    res.header("Access-Control-Allow-Origin", "*");
    next();
}
function startExpressServer(compilerApp, port) {
    return new Promise(function (resolve, reject) {
        compilerApp
            .listen(port, function () {
            resolve();
        })
            .on("error", function () {
            reject();
        });
    });
}
